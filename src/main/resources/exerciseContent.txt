ex1.
Implement queue in which can be stored any elements. Implementation should 
be made according to Queue interface. Use test QueueTest.java
to check if the exercise is done correctly.

ex2.
Implement stack in which can be stored any elements. Implementation should 
be made according to Stack interface. Use test StackTest.java 
to check if the exercise is done correctly.

ex3.
Write two applications using JMS.
a) first one - client - should be connected to topic and display text message
that are sent by server(producer). Application should be terminated after receiving
message "exit"
b) second one - server - should be connected to topic and give the user ability to send messages 
that are typed in console. When typed message is "exit", application should send the message and terminate. 

Use ActiveMQ ( for example using docker: 
$ docker run --name='activemq' -p 8161:8161 -p 61616:61616 -p 61613:61613 webcenter/activemq
admin console: http://localhost:8161/admin/index.jsp
login: admin, password admin
Test app running one server and at least 2 clients. Each client should receive message 
from server.

ex4. 
Write console app that will minimize by half the size of given photo.
a) source file and target file should be given as program call parameters.
b) size of the target file should be a half of the value of source file.
for eg. source file with given size 800x600 should be rescaled to target file
of size 400x300
c) use Graphics/BufferedImage/ImageIcon classes or any other library to do the work.

ex5.
Write console app that will compress to .zip content of given folder.
a) path to source folder should be given as application call parameter.
b) path to target folder should be given as application call parameter (optional).
if not then compressed file should be created on the same level as the source folder,
with the name nazwaFolderu.zip
c) compressed file should contains only files that are situated directly in given folder.
Do not consider files/folders that are nested deeper.

ex6.
Write console app that will fetch WWW address from user and check available
http method and size of the resource.
a) user should be able to give address as a program call parameter or directly 
after launching app via Scanner.
b) if given address does not exists, app should inform about it user and terminate 
with exit code other than 0.
c) if given address exists then app should display available http method  and size 
of the content
d) app shouldn't download physically content pointed by address.
Use http method: HEAD, OPTIONS

